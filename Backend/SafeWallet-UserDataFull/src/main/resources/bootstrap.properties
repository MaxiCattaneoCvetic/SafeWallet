base.url=http://swmax.cloud/
#-----------------CONFIGURACION VARIABLES DE ENTORNO --------------->
urlToServiceBalance=http://localhost:8086


# Definimos la URL y el puerto en las cuales esta corriendo mi config-server
spring.cloud.config.uri=http://localhost:8888
spring.security.enabled=false
spring.application.name=register-full

#-----------------CONFIGURACION MICROSERVICIO CONFIG-SERVER --------------->
# Definimos cual es el perfil de propiedades que queremos cargar desde nuestro config
spring.cloud.config.profile=prod
spring.data.mongodb.uri=mongodb+srv://safewallet:safewallet@safewalletcluster.tcqvwuk.mongodb.net/safewallet?retryWrites=true&w=majority

#-----------------CONFIGURACION MICROSERVICIO --------------->
# Definimos que spring defina los puertos para cada instancia de este microservicio
server.port=0


# Definimos los nombres de nuesros microservicios al crearse una nueva instancia de el
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
#Esta en el config-server eureka.instance.hostname=localhost




#-----------------CONFIGURACION configserver ACTUATOR --------------->

# Configuramos el refresh para que escuche los cambios en git y refresque la config
management.endpoints.web.exposure.include=*

#-----------------CONFIGURACION VAULT--------------->
# spring.cloud.vault.application-name=register-full-microservice
# spring.cloud.vault.host=localhost
# spring.cloud.vault.port=8200
# spring.cloud.vault.scheme=http
# spring.cloud.vault.authentication=TOKEN
# spring.cloud.vault.token=00000000-0000-0000-0000-000000000000



#-----------------CONFIGURACION RABBITMQ --------------->

spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

#-----------------CONFIGURACION DECODER --------------->
spring.security.oauth2.resourceserver.jwt.issuer-uri=${base.url}realms/safewallet
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${base.url}realms/safewallet/protocol/openid-connect/certs

#-----------------CONFIGURACION SWAGGER --------------->
springdoc.api-docs.enabled = true
springdoc.swagger-ui.enabled=true

#Definimos la ruta
springdoc.swagger-ui.path=/doc/swagger-ui.html

springdoc.pathsToMatch=/users/**, /user/**
